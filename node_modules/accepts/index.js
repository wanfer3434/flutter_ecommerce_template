const functions = require('firebase-functions');
const admin = require('firebase-admin');
const cors = require('cors')({ origin: true });
const { Storage } = require('@google-cloud/storage');
const sharp = require('sharp');

admin.initializeApp();

const db = admin.firestore();
const storage = new Storage();
const bucket = storage.bucket('flutterecommercetemplate-72969.appspot.com');

// Función para subir y redimensionar imágenes
exports.uploadImage = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    try {
      if (req.method !== 'POST') {
        return res.status(405).send('Method Not Allowed');
      }

      if (!req.body || !req.body.filePath || !req.body.imageData) {
        return res.status(400).send('Bad Request: Missing file path or image data');
      }

      const filePath = req.body.filePath;
      const imageData = req.body.imageData; // Base64 encoded image data

      // Redimensionar la imagen usando sharp
      const resizedImageBuffer = await sharp(Buffer.from(imageData, 'base64'))
        .resize({ width: 300 }) // Ajusta el tamaño según tus necesidades
        .toBuffer();

      const file = bucket.file(filePath);
      await file.save(resizedImageBuffer, {
        contentType: 'image/jpeg', // Ajusta según el tipo de imagen
        public: true,
      });

      const publicUrl = `https://storage.googleapis.com/${bucket.name}/${filePath}`;
      res.status(200).send({ imageUrl: publicUrl });
    } catch (error) {
      console.error('Error uploading image:', error);
      await logError('uploadImage', error.message);
      res.status(500).send('Internal Server Error');
    }
  });
});

// Función para registrar errores en Firestore
async function logError(functionName, errorMessage) {
  const timestamp = new Date();
  await db.collection('errors').add({
    function: functionName,
    message: errorMessage,
    timestamp: timestamp,
  });
}
