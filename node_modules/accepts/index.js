const functions = require('firebase-functions');
const admin = require('firebase-admin');
const cors = require('cors')({ origin: true });
const { Storage } = require('@google-cloud/storage');

admin.initializeApp();

const db = admin.firestore();
const storage = new Storage();
const bucket = storage.bucket('flutterecommercetemplate-72969.appspot.com');

// Función para manejar CORS y enviar un saludo
exports.exampleFunction = functions.https.onRequest((req, res) => {
  cors(req, res, () => {
    res.send("Hello, World!");
  });
});

// Función para agregar un producto a Firestore
exports.addProduct = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    try {
      if (req.method !== 'POST') {
        return res.status(405).send('Method Not Allowed');
      }

      const product = req.body;
      if (!product || !product.name || !product.price) {
        return res.status(400).send('Bad Request: Missing product information');
      }

      // Agregar el producto a Firestore
      const docRef = db.collection('products').doc();
      await docRef.set(product);

      res.status(201).send('Product added successfully');
    } catch (error) {
      console.error('Error adding product:', error);
      await logError('addProduct', error.message);
      res.status(500).send('Internal Server Error');
    }
  });
});

// Función para actualizar un producto existente en Firestore
exports.updateProduct = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    try {
      if (req.method !== 'PUT') {
        return res.status(405).send('Method Not Allowed');
      }

      const { documentId, product } = req.body;
      if (!documentId || !product) {
        return res.status(400).send('Bad Request: Missing document ID or product information');
      }

      // Actualizar el producto en Firestore
      const docRef = db.collection('products').doc(documentId);
      await docRef.update(product);

      res.status(200).send('Product updated successfully');
    } catch (error) {
      console.error('Error updating product:', error);
      await logError('updateProduct', error.message);
      res.status(500).send('Internal Server Error');
    }
  });
});

// Función para eliminar un producto de Firestore
exports.deleteProduct = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    try {
      if (req.method !== 'DELETE') {
        return res.status(405).send('Method Not Allowed');
      }

      const { documentId } = req.body;
      if (!documentId) {
        return res.status(400).send('Bad Request: Missing document ID');
      }

      // Eliminar el producto de Firestore
      const docRef = db.collection('products').doc(documentId);
      await docRef.delete();

      res.status(200).send('Product deleted successfully');
    } catch (error) {
      console.error('Error deleting product:', error);
      await logError('deleteProduct', error.message);
      res.status(500).send('Internal Server Error');
    }
  });
});

// Función para subir una imagen a Firebase Storage
exports.uploadImage = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    try {
      if (req.method !== 'POST') {
        return res.status(405).send('Method Not Allowed');
      }

      if (!req.body || !req.body.filePath || !req.body.imageData) {
        return res.status(400).send('Bad Request: Missing file path or image data');
      }

      const filePath = req.body.filePath;
      const imageData = req.body.imageData; // Base64 encoded image data

      const file = bucket.file(filePath);
      await file.save(Buffer.from(imageData, 'base64'), {
        contentType: 'image/jpeg', // Ajusta según el tipo de imagen
        public: true,
      });

      const publicUrl = `https://storage.googleapis.com/${bucket.name}/${filePath}`;
      res.status(200).send({ imageUrl: publicUrl });
    } catch (error) {
      console.error('Error uploading image:', error);
      await logError('uploadImage', error.message);
      res.status(500).send('Internal Server Error');
    }
  });
});

// Función para obtener la URL de una imagen en Firebase Storage
exports.getImageUrl = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    try {
      if (req.method !== 'GET') {
        return res.status(405).send('Method Not Allowed');
      }

      const filePath = req.query.filePath;
      if (!filePath) {
        return res.status(400).send('Bad Request: Missing file path');
      }

      const file = bucket.file(filePath);
      const [exists] = await file.exists();

      if (!exists) {
        return res.status(404).send('Not Found: Image does not exist');
      }

      const [metadata] = await file.getMetadata();
      const imageUrl = metadata.mediaLink;
      res.status(200).send({ imageUrl });
    } catch (error) {
      console.error('Error getting image URL:', error);
      await logError('getImageUrl', error.message);
      res.status(500).send('Internal Server Error');
    }
  });
});

// Función para registrar errores en Firestore
async function logError(functionName, errorMessage) {
  const timestamp = new Date();
  await db.collection('errors').add({
    function: functionName,
    message: errorMessage,
    timestamp: timestamp,
  });
}
